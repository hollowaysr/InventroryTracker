name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: 'rfid-inventory-tracker'
  DOTNET_VERSION: '8.0.x'
  WORKING_DIRECTORY: '.'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.WORKING_DIRECTORY }}
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      working-directory: ${{ env.WORKING_DIRECTORY }}
      
    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      working-directory: ${{ env.WORKING_DIRECTORY }}
      
    - name: Generate code coverage report
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: false
        
    - name: Publish application
      run: dotnet publish InventoryTracker.Web/InventoryTracker.Web.csproj --configuration Release --no-build --output ./publish
      working-directory: ${{ env.WORKING_DIRECTORY }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: webapp-build
        path: ./publish

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: webapp-build
        path: ./publish
        
    - name: Deploy to Azure Web App (Staging)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-staging
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ./publish

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: webapp-build
        path: ./publish
        
    - name: Deploy to Azure Web App (Production)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
        package: ./publish

  database-migration:
    runs-on: ubuntu-latest
    needs: [deploy-to-staging, deploy-to-production]
    if: always() && (needs.deploy-to-staging.result == 'success' || needs.deploy-to-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install EF Core tools
      run: dotnet tool install --global dotnet-ef
      
    - name: Update database (Staging)
      if: needs.deploy-to-staging.result == 'success'
      run: dotnet ef database update --project InventoryTracker.Data --startup-project InventoryTracker.Web --connection "${{ secrets.DATABASE_CONNECTION_STRING_STAGING }}"
      working-directory: ${{ env.WORKING_DIRECTORY }}
      
    - name: Update database (Production)
      if: needs.deploy-to-production.result == 'success'
      run: dotnet ef database update --project InventoryTracker.Data --startup-project InventoryTracker.Web --connection "${{ secrets.DATABASE_CONNECTION_STRING_PRODUCTION }}"
      working-directory: ${{ env.WORKING_DIRECTORY }}
